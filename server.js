 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.get('/:time', function(req, res){
  var time = req.params.time;
  var ret = {unix: null, natural: null};
  var months = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"];
  if(!isNaN(time)){ //Is it a number?
    ret.unix = time;
    var data = new Date(time*1000);
    ret.natural = months[data.getMonth()] + " " + data.getDate() + ", " + data.getFullYear();
  }else{ //Not a number. Maybe it's a string with a date?
    var parts = time.split(",");
    if(parts.length===2){
      var monthday = parts[0].split(" ");
      if(monthday.length==2){
        monthday[0] = monthday[0].charAt(0).toUpperCase() + monthday[0].slice(1);
        if( (months.indexOf(monthday[0])>-1) && (Number(monthday[1])>=1) && (Number(monthday[1])<=31)){
          parts[1] = parts[1].trim();
          if((parts[1]!=="") && !isNaN(Number(parts[1]))){
            ret.unix = Date.parse(time) / 1000;
            ret.natural = time;
          }
        }        
      } 
    }
  }
  res.send(ret);
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

